from typing import (
    Iterator,
    MutableMapping,
    MutableSequence,
    Optional,
    Pattern,
    Sequence,
    Tuple,
)

from xdg.Exceptions import (
    DuplicateGroupError as DuplicateGroupError,
    DuplicateKeyError as DuplicateKeyError,
    NoGroupError as NoGroupError,
    NoKeyError as NoKeyError,
    ParsingError as ParsingError,
    ValidationError as ValidationError,
    debug as debug,
)
from xdg.util import u as u

def is_ascii(s: str) -> bool: ...

class IniFile:
    defaultGroup: str
    fileExtension: str
    filename: str
    tainted: bool
    content: MutableMapping[str, MutableMapping[str, str]]
    def __init__(self, filename: Optional[str] = ...) -> None: ...
    def __cmp__(self, other): ...
    def parse(self, filename: str, headers: Optional[Sequence[str]] = ...) -> None: ...
    def get(
        self,
        key: str,
        group: Optional[str] = ...,
        locale: bool = ...,
        type: str = ...,
        list: bool = ...,
        strict: bool = ...,
    ) -> (
        bool
        | int
        | float
        | Pattern[str]
        | Tuple[int, int]
        | Sequence[bool]
        | Sequence[int]
        | Sequence[float]
        | Sequence[Pattern[str]]
        | Sequence[Tuple[int, int]]
    ): ...
    def getList(self, string: str) -> Sequence[str]: ...
    warnings: MutableSequence[str]
    errors: MutableSequence[str]
    def validate(self, report: str = ...) -> None: ...
    def checkGroup(self, group: str) -> None: ...
    def checkKey(self, key: str, value: str, group: str) -> None: ...
    def checkValue(
        self, key: str, value: str, type: str = ..., list: bool = ...
    ) -> None: ...
    def checkExtras(self) -> None: ...
    def checkBoolean(self, value: str) -> int: ...
    def checkNumber(self, value: str) -> Optional[int]: ...
    def checkInteger(self, value: str) -> Optional[int]: ...
    def checkPoint(self, value: str) -> Optional[int]: ...
    def checkString(self, value: str) -> int: ...
    def checkRegex(self, value: str) -> Optional[int]: ...
    def write(self, filename: Optional[str] = ..., trusted: bool = ...) -> None: ...
    def set(
        self, key: str, value: str, group: Optional[str] = ..., locale: bool = ...
    ) -> None: ...
    def addGroup(self, group: str) -> None: ...
    def removeGroup(self, group: str): ...
    def removeKey(
        self, key: str, group: Optional[str] = ..., locales: bool = ...
    ) -> str: ...
    def groups(self) -> Iterator[str]: ...
    def hasGroup(self, group: str) -> bool: ...
    def hasKey(self, key: str, group: Optional[str] = ...) -> bool: ...
    def getFileName(self) -> str: ...
