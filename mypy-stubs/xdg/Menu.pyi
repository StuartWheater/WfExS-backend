import ast
from typing import (
    MutableMapping,
    MutableSequence,
    Optional,
    Sequence,
)

from xml.etree.ElementTree import Element

from collections.abc import Generator
from xdg.BaseDirectory import (
    xdg_config_dirs as xdg_config_dirs,
    xdg_data_dirs as xdg_data_dirs,
)
from xdg.DesktopEntry import DesktopEntry as DesktopEntry
from xdg.Exceptions import ParsingError as ParsingError
from xdg.util import PY3 as PY3

DELETED: str
NO_DISPLAY: str
HIDDEN: str
EMPTY: str
NOT_SHOW_IN: str
NO_EXEC: str

MiscMenuEntry = Separator | MenuEntry | Menu

class Menu:
    Name: str
    Directory: Optional[MenuEntry]
    Entries: MutableSequence[MiscMenuEntry]
    Doc: str
    Filename: str
    Depth: int
    Parent: Optional[Menu]
    NotInXml: bool
    Show: bool
    Visible: int
    AppDirs: MutableSequence[str]
    DefaultLayout: Optional[Layout]
    Deleted: Optional[bool]
    Directories: MutableSequence[str]
    DirectoryDirs: MutableSequence[str]
    Layout: Optional[Layout]
    MenuEntries: MutableSequence[MenuEntry]
    Moves: MutableSequence[Move]
    OnlyUnallocated: Optional[bool]
    Rules: MutableSequence[Rule]
    Submenus: MutableSequence[Menu]
    def __init__(self) -> None: ...
    def __add__(self, other: Menu) -> Menu: ...
    def __cmp__(self, other: Menu) -> int: ...
    def __lt__(self, other: Menu) -> bool: ...
    def __eq__(self, other: Menu) -> bool: ...
    def getEntries(
        self, show_hidden: bool = ...
    ) -> Generator[MiscMenuEntry, None, None]: ...
    def getMenuEntry(self, desktopfileid: str, deep: bool = ...) -> MenuEntry: ...
    def getMenu(self, path: str) -> Menu: ...
    def getPath(self, org: bool = ..., toplevel: bool = ...) -> str: ...
    def getName(self) -> str: ...
    def getGenericName(self) -> str: ...
    def getComment(self) -> str: ...
    def getIcon(self) -> str: ...
    def sort(self) -> None: ...
    def addSubmenu(self, newmenu: Menu) -> None: ...
    def merge_inline(self, submenu: Menu) -> None: ...

class Move:
    Old: str
    New: str
    def __init__(self, old: str = ..., new: str = ...) -> None: ...
    def __cmp__(self, other: Move): ...

class Layout:
    show_empty: bool
    inline: bool
    inline_limit: int
    inline_header: bool
    inline_alias: bool
    def __init__(
        self,
        show_empty: bool = ...,
        inline: bool = ...,
        inline_limit: int = ...,
        inline_header: bool = ...,
        inline_alias: bool = ...,
    ) -> None: ...
    @property
    def order(self) -> Sequence[Sequence[str]]: ...
    @order.setter
    def order(self, order: Sequence[Sequence[str]]) -> None: ...

class Rule:
    TYPE_INCLUDE: int
    TYPE_EXCLUDE: int
    @classmethod
    def fromFilename(cls, type: int, filename: str) -> Rule: ...
    Type: int
    expression: ast.Expression
    # Which is the type annotation from class "code"?
    code: Any
    def __init__(self, type: int, expression: ast.Expression) -> None: ...
    def apply(
        self, menuentries: Sequence[MenuEntry], run: int
    ) -> Sequence[MenuEntry]: ...

class MenuEntry:
    TYPE_USER: str
    TYPE_SYSTEM: str
    TYPE_BOTH: str
    DesktopEntry: DesktopEntry
    Show: bool
    Original: Optional[MenuEntry]
    Parents: MutableSequence[Menu]
    Allocated: bool
    Add: bool
    MatchedInclude: bool
    Categories: Sequence[str]
    def __init__(self, filename: str, dir: str = ..., prefix: str = ...) -> None: ...
    def save(self) -> None: ...
    def getDir(self) -> str: ...
    def getType(self) -> str: ...
    Filename: str
    Prefix: str
    DesktopFileID: str
    def setAttributes(
        self, filename: str, dir: str = ..., prefix: str = ...
    ) -> None: ...
    def updateAttributes(self) -> None: ...
    def __cmp__(self, other: MenuEntry) -> int: ...
    def __lt__(self, other: MenuEntry) -> bool: ...
    def __eq__(self, other: MenuEntry) -> bool: ...

class Separator:
    Parent: Menu
    Show: bool
    def __init__(self, parent: Menu) -> None: ...

class Header:
    Name: str
    GenericName: str
    Comment: str
    def __init__(self, name: str, generic_name: str, comment: str) -> None: ...

TYPE_DIR: int
TYPE_FILE: int

class XMLMenuBuilder:
    debug: bool
    def __init__(self, debug: bool = ...) -> None: ...
    cache: MenuEntryCache
    def parse(self, filename: Optional[str] = ...) -> Menu: ...
    def parse_menu(self, node: Element, filename: str) -> Menu: ...
    def parse_node(
        self, node: Element, filename: str, parent: Optional[Menu] = ...
    ) -> None: ...
    def parse_layout(self, node: Element) -> Layout: ...
    def parse_move(self, node: Element) -> Move: ...
    def parse_rule(self, node: Element) -> Rule: ...
    def parse_bool_op(
        self, node: Element, operator: ast.And | ast.Or
    ) -> Optional[ast.Expr]: ...
    def parse_rule_node(self, node: Element) -> ast.Expr: ...
    def parse_app_dir(self, value, filename: str, parent: Menu) -> None: ...
    def parse_default_app_dir(self, filename: str, parent: Menu) -> None: ...
    def parse_directory_dir(self, value, filename: str, parent: Menu) -> None: ...
    def parse_default_directory_dir(self, filename: str, parent: Menu) -> None: ...
    def parse_merge_file(
        self, value, child, filename: str, parent: Optional[Menu]
    ) -> None: ...
    def parse_merge_dir(
        self, value, child, filename: str, parent: Optional[Menu]
    ) -> None: ...
    def parse_default_merge_dirs(
        self, child, filename: str, parent: Optional[Menu]
    ) -> None: ...
    def merge_file(self, filename: str, child, parent: Optional[Menu]) -> None: ...
    def parse_legacy_dir(self, dir_, prefix, filename: str, parent: Menu) -> None: ...
    def merge_legacy_dir(self, dir_, prefix, filename: str, parent: Menu): ...
    def parse_kde_legacy_dirs(self, filename: str, parent: Menu) -> None: ...
    def post_parse(self, menu: Menu) -> None: ...
    def generate_not_only_allocated(self, menu: Menu) -> None: ...
    def generate_only_allocated(self, menu: Menu) -> None: ...
    def handle_moves(self, menu: Menu) -> None: ...

class MenuEntryCache:
    cacheEntries: MutableMapping[str, MutableSequence[MenuEntry]]
    cache: MutableMapping[str, Sequence[MenuEntry]]
    def __init__(self) -> None: ...
    def add_menu_entries(
        self, dirs: Sequence[str], prefix: str = ..., legacy: bool = ...
    ) -> None: ...
    def get_menu_entries(
        self, dirs: Sequence[str], legacy: bool = ...
    ) -> Sequence[MenuEntry]: ...

def parse(filename: Optional[str] = ..., debug: bool = ...) -> Menu: ...
